{"ast":null,"code":"var _jsxFileName = \"/Users/justin/Documents/Programming /meme-share/client/src/views/feed/Feed.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport globalStyles from \"../../config/globalStyles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getPosts } from \"../../actions/postActions\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Loading from \"../../components/UI/Loading\";\nimport MemeCard from \"../../components/UI/MemeCard\";\nimport Button from \"../../components/UI/Button\";\nimport Modal from \"../../components/UI/Modal\";\nimport Link from \"../../components/UI/Link\";\nimport Backdrop from \"../../components/UI/Backdrop\";\nimport colors from \"../../config/colors\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst All = props => {\n  const dispatch = useDispatch();\n  const biggerThan1024 = useMediaPredicate(\"(min-width: 1024px)\");\n  const biggerThan720 = useMediaPredicate(\"(min-width: 720px)\");\n  const [toggleModal, setToggleModal] = useState(false);\n  const {\n    category\n  } = props;\n\n  const handleToggleModal = () => {\n    setToggleModal(!toggleModal);\n  };\n\n  useEffect(() => {\n    if (category) {\n      dispatch(getPosts(category));\n    } else {\n      dispatch(getPosts());\n    }\n  }, [dispatch, category]);\n  const posts = useSelector(state => ({\n    posts: state.posts.posts\n  }), []);\n\n  if (!posts.posts.length) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: globalStyles.fullScreenLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  const refreshPage = () => {\n    console.log(\"refresh\");\n  };\n\n  const loadMore = () => {\n    console.log(\"load more\");\n  };\n\n  const ModalBody = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      style: styles.modalMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, \"You need to be signed in to interact with content on our site.\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: styles.modalBtnContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Login\",\n      style: {\n        backgroundColor: colors.green,\n        marginRight: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Link, {\n      to: \"/signup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"Signup\",\n      style: {\n        backgroundColor: colors.tertiary\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: posts.posts.length,\n    next: () => loadMore(),\n    hasMore: true,\n    endMessage: /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        textAlign: \"center\",\n        color: \"red\",\n        margin: 25\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, \"Yay! You have seen it all\")),\n    refreshFunction: () => refreshPage(),\n    pullDownToRefresh: true,\n    pullDownToRefreshThreshold: 50,\n    pullDownToRefreshContent: /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, \"\\u2193 Pull down to refresh\"),\n    releaseToRefreshContent: /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"\\u2191 Release to refresh\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal, {\n    header: /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, \"Hey there!\"),\n    body: /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }),\n    close: handleToggleModal,\n    isOpen: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }), toggleModal ? /*#__PURE__*/React.createElement(Backdrop, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 24\n    }\n  }) : null, biggerThan1024 ? /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, posts.posts.map((post, i) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(MemeCard, {\n      toggleModal: handleToggleModal,\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }\n    }));\n  }))) : biggerThan720 ? /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.mediumContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, posts.posts.map((post, i) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(MemeCard, {\n      toggleModal: handleToggleModal,\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }));\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.smallContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: styles.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, posts.posts.map((post, i) => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(MemeCard, {\n      toggleModal: handleToggleModal,\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }));\n  })))));\n};\n\nconst styles = {\n  container: {\n    marginLeft: \"35vw\",\n    marginRight: \"35vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"60px\"\n  },\n  mediumContainer: {\n    marginLeft: \"20vw\",\n    marginRight: \"20vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"56px\"\n  },\n  smallContainer: {\n    marginLeft: \"5vw\",\n    marginRight: \"5vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"56px\"\n  },\n  content: {\n    maxWidth: \"90vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 20\n  },\n  modalMessage: {\n    textAlign: \"center\"\n  },\n  modalBtnContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  }\n};\nexport default All;","map":{"version":3,"sources":["/Users/justin/Documents/Programming /meme-share/client/src/views/feed/Feed.jsx"],"names":["React","useEffect","useState","globalStyles","useSelector","useDispatch","getPosts","useMediaPredicate","Loading","MemeCard","Button","Modal","Link","Backdrop","colors","InfiniteScroll","All","props","dispatch","biggerThan1024","biggerThan720","toggleModal","setToggleModal","category","handleToggleModal","posts","state","length","fullScreenLoading","refreshPage","console","log","loadMore","ModalBody","styles","modalMessage","modalBtnContainer","backgroundColor","green","marginRight","tertiary","textAlign","color","margin","container","content","map","post","i","mediumContainer","smallContainer","marginLeft","height","marginTop","maxWidth","display","flexDirection","justifyContent","paddingBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nimport globalStyles from \"../../config/globalStyles\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getPosts } from \"../../actions/postActions\";\nimport { useMediaPredicate } from \"react-media-hook\";\nimport Loading from \"../../components/UI/Loading\";\nimport MemeCard from \"../../components/UI/MemeCard\";\nimport Button from \"../../components/UI/Button\";\nimport Modal from \"../../components/UI/Modal\";\nimport Link from \"../../components/UI/Link\";\nimport Backdrop from \"../../components/UI/Backdrop\";\nimport colors from \"../../config/colors\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst All = (props) => {\n  const dispatch = useDispatch();\n  const biggerThan1024 = useMediaPredicate(\"(min-width: 1024px)\");\n  const biggerThan720 = useMediaPredicate(\"(min-width: 720px)\");\n  const [toggleModal, setToggleModal] = useState(false);\n\n  const { category } = props;\n\n  const handleToggleModal = () => {\n    setToggleModal(!toggleModal);\n  };\n\n  useEffect(() => {\n    if (category) {\n      dispatch(getPosts(category));\n    } else {\n      dispatch(getPosts());\n    }\n  }, [dispatch, category]);\n\n  const posts = useSelector(\n    (state) => ({\n      posts: state.posts.posts,\n    }),\n    []\n  );\n\n  if (!posts.posts.length) {\n    return (\n      <div style={globalStyles.fullScreenLoading}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const refreshPage = () => {\n    console.log(\"refresh\");\n  };\n\n  const loadMore = () => {\n    console.log(\"load more\");\n  };\n\n  const ModalBody = () => {\n    return (\n      <div>\n        <h4 style={styles.modalMessage}>\n          You need to be signed in to interact with content on our site.\n        </h4>\n        <div style={styles.modalBtnContainer}>\n          <Link to=\"/login\">\n            <Button\n              title=\"Login\"\n              style={{ backgroundColor: colors.green, marginRight: 10 }}\n            />\n          </Link>\n          <Link to=\"/signup\">\n            <Button\n              title=\"Signup\"\n              style={{ backgroundColor: colors.tertiary }}\n            />\n          </Link>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <InfiniteScroll\n      dataLength={posts.posts.length}\n      next={() => loadMore()}\n      hasMore={true}\n      endMessage={\n        <p style={{ textAlign: \"center\", color: \"red\", margin: 25 }}>\n          <b>Yay! You have seen it all</b>\n        </p>\n      }\n      refreshFunction={() => refreshPage()}\n      pullDownToRefresh\n      pullDownToRefreshThreshold={50}\n      pullDownToRefreshContent={\n        <h3 style={{ textAlign: \"center\" }}>&#8595; Pull down to refresh</h3>\n      }\n      releaseToRefreshContent={\n        <h3 style={{ textAlign: \"center\" }}>&#8593; Release to refresh</h3>\n      }\n    >\n      <React.Fragment>\n        <Modal\n          header={<h1>Hey there!</h1>}\n          body={<ModalBody />}\n          close={handleToggleModal}\n          isOpen={toggleModal}\n        />\n        {toggleModal ? <Backdrop /> : null}\n        {biggerThan1024 ? (\n          <div style={styles.container}>\n            <div style={styles.content}>\n              {posts.posts.map((post, i) => {\n                return (\n                  <React.Fragment key={i}>\n                    <MemeCard toggleModal={handleToggleModal} post={post} />\n                  </React.Fragment>\n                );\n              })}\n            </div>\n          </div>\n        ) : biggerThan720 ? (\n          <div style={styles.mediumContainer}>\n            <div style={styles.content}>\n              {posts.posts.map((post, i) => {\n                return (\n                  <React.Fragment key={i}>\n                    <MemeCard toggleModal={handleToggleModal} post={post} />\n                  </React.Fragment>\n                );\n              })}\n            </div>\n          </div>\n        ) : (\n          <div style={styles.smallContainer}>\n            <div style={styles.content}>\n              {posts.posts.map((post, i) => {\n                return (\n                  <React.Fragment key={i}>\n                    <MemeCard toggleModal={handleToggleModal} post={post} />\n                  </React.Fragment>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </React.Fragment>\n    </InfiniteScroll>\n  );\n};\n\nconst styles = {\n  container: {\n    marginLeft: \"35vw\",\n    marginRight: \"35vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"60px\",\n  },\n  mediumContainer: {\n    marginLeft: \"20vw\",\n    marginRight: \"20vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"56px\",\n  },\n  smallContainer: {\n    marginLeft: \"5vw\",\n    marginRight: \"5vw\",\n    height: \"calc(100vh - 56px)\",\n    marginTop: \"56px\",\n  },\n  content: {\n    maxWidth: \"90vw\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    paddingBottom: 20,\n  },\n  modalMessage: {\n    textAlign: \"center\",\n  },\n  modalBtnContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n};\n\nexport default All;\n"]},"metadata":{},"sourceType":"module"}