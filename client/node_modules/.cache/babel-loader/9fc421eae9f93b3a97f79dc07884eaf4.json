{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { GET_MY_POSTS, GET_POSTS, GET_POST, UP_VOTE, DOWN_VOTE } from \"./types\";\nimport { APIURL } from \"../config/vars\";\nexport const getPost = postId => dispatch => {\n  axios.get(`${APIURL}posts/${postId}`).then(res => {\n    dispatch({\n      type: GET_POST,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(console.log(err));\n  });\n};\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n\n  if (user) {\n    axios.get(`${APIURL}posts?user=${user._id}`).then(res => {\n      dispatch({\n        type: GET_MY_POSTS,\n        payload: res.data.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n  }\n};\nexport const getPosts = () => dispatch => {\n  axios.get(`${APIURL}posts`).then(res => {\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};\nexport const upVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (upVote.data.success) {\n    let newPosts = [];\n    posts.forEach(post => {\n      if (post._id !== upVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: upVote.data.data.upVotes,\n          downVotes: upVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n\n    if (removedUpVote.data.success) {\n      let newPosts = [];\n      posts.forEach(post => {\n        if (post._id !== removedUpVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedUpVote.data.data.upVotes,\n            downVotes: removedUpVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/justin/Documents/Programming /meme-share/client/src/actions/postActions.js"],"names":["axios","returnErrors","GET_MY_POSTS","GET_POSTS","GET_POST","UP_VOTE","DOWN_VOTE","APIURL","getPost","postId","dispatch","get","then","res","type","payload","data","catch","err","console","log","getMyPosts","getState","user","auth","_id","response","status","getPosts","upVote","post","posts","success","newPosts","forEach","push","updatedPost","category","upVotes","downVotes","title","content","createdAt","__v","comments","id","removedUpVote","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport { GET_MY_POSTS, GET_POSTS, GET_POST, UP_VOTE, DOWN_VOTE } from \"./types\";\n\nimport { APIURL } from \"../config/vars\";\n\nexport const getPost = (postId) => (dispatch) => {\n  axios\n    .get(`${APIURL}posts/${postId}`)\n    .then((res) => {\n      dispatch({\n        type: GET_POST,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(console.log(err));\n    });\n};\n\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n  if (user) {\n    axios\n      .get(`${APIURL}posts?user=${user._id}`)\n      .then((res) => {\n        dispatch({\n          type: GET_MY_POSTS,\n          payload: res.data.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n      });\n  }\n};\n\nexport const getPosts = () => (dispatch) => {\n  axios\n    .get(`${APIURL}posts`)\n    .then((res) => {\n      dispatch({\n        type: GET_POSTS,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\nexport const upVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (upVote.data.success) {\n    let newPosts = [];\n    posts.forEach((post) => {\n      if (post._id !== upVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: upVote.data.data.upVotes,\n          downVotes: upVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id,\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts,\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n\n    if (removedUpVote.data.success) {\n      let newPosts = [];\n      posts.forEach((post) => {\n        if (post._id !== removedUpVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedUpVote.data.data.upVotes,\n            downVotes: removedUpVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id,\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts,\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}