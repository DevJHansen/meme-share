{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { GET_MY_POSTS, GET_POSTS, GET_POST, UP_VOTE, DOWN_VOTE } from \"./types\";\nimport { APIURL } from \"../config/vars\";\nexport const getPost = postId => dispatch => {\n  axios.get(`${APIURL}posts/${postId}`).then(res => {\n    dispatch({\n      type: GET_POST,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(console.log(err));\n  });\n};\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n\n  if (user) {\n    axios.get(`${APIURL}posts?user=${user._id}`).then(res => {\n      dispatch({\n        type: GET_MY_POSTS,\n        payload: res.data.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n  }\n};\nexport const getPosts = () => dispatch => {\n  axios.get(`${APIURL}posts`).then(res => {\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};\nexport const upVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const upVotes = getState().posts.upVotes;\n  const downVotes = getState().posts.downVotes;\n  const removedUpVotes = getState().posts.removedUpVotes;\n  const removedDownVotes = getState().posts.removedDownVotes;\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (upVote.data.success) {\n    // Add to local up vote state\n    const newUpVotes = [...upVotes, post._id];\n    dispatch({\n      type: UP_VOTE,\n      payload: newUpVotes\n    }); // remove from local down vote state\n\n    let newDownVotes = [];\n    downVotes.forEach(vote => {\n      if (vote !== post._id) {\n        newDownVotes.push(vote);\n      }\n    }); // remove from local removedUpVote state\n\n    let newRemovedUpVotes = [];\n    removedUpVotes.forEach(vote => {\n      if (vote !== post._id) {\n        newRemovedUpVotes.push(vote);\n      }\n    });\n    dispatch({\n      type: REMOVE_UP_VOTE,\n      payload: newRemovedUpVotes\n    });\n    dispatch({\n      type: DOWN_VOTE,\n      payload: newDownVotes\n    });\n  } else {\n    // remove from local up vote state\n    let newUpVotes = [];\n    upVotes.forEach(vote => {\n      if (vote !== post._id) {\n        newUpVotes.push(vote);\n      }\n    });\n    dispatch({\n      type: UP_VOTE,\n      payload: newUpVotes\n    });\n    const newRemovedUpVotes = [...removedDownVotes, post._id];\n    dispatch({\n      type: REMOVE_UP_VOTE,\n      payload: newRemovedUpVotes\n    }); // remove up vote with put request\n\n    await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n  }\n};","map":{"version":3,"sources":["/Users/justin/Documents/Programming /meme-share/client/src/actions/postActions.js"],"names":["axios","returnErrors","GET_MY_POSTS","GET_POSTS","GET_POST","UP_VOTE","DOWN_VOTE","APIURL","getPost","postId","dispatch","get","then","res","type","payload","data","catch","err","console","log","getMyPosts","getState","user","auth","_id","response","status","getPosts","upVote","post","upVotes","posts","downVotes","removedUpVotes","removedDownVotes","success","newUpVotes","newDownVotes","forEach","vote","push","newRemovedUpVotes","REMOVE_UP_VOTE","put"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport { GET_MY_POSTS, GET_POSTS, GET_POST, UP_VOTE, DOWN_VOTE } from \"./types\";\n\nimport { APIURL } from \"../config/vars\";\n\nexport const getPost = (postId) => (dispatch) => {\n  axios\n    .get(`${APIURL}posts/${postId}`)\n    .then((res) => {\n      dispatch({\n        type: GET_POST,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(console.log(err));\n    });\n};\n\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n  if (user) {\n    axios\n      .get(`${APIURL}posts?user=${user._id}`)\n      .then((res) => {\n        dispatch({\n          type: GET_MY_POSTS,\n          payload: res.data.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n      });\n  }\n};\n\nexport const getPosts = () => (dispatch) => {\n  axios\n    .get(`${APIURL}posts`)\n    .then((res) => {\n      dispatch({\n        type: GET_POSTS,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\nexport const upVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const upVotes = getState().posts.upVotes;\n  const downVotes = getState().posts.downVotes;\n  const removedUpVotes = getState().posts.removedUpVotes;\n  const removedDownVotes = getState().posts.removedDownVotes;\n\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (upVote.data.success) {\n    // Add to local up vote state\n    const newUpVotes = [...upVotes, post._id];\n\n    dispatch({\n      type: UP_VOTE,\n      payload: newUpVotes,\n    });\n\n    // remove from local down vote state\n    let newDownVotes = [];\n\n    downVotes.forEach((vote) => {\n      if (vote !== post._id) {\n        newDownVotes.push(vote);\n      }\n    });\n\n    // remove from local removedUpVote state\n    let newRemovedUpVotes = [];\n\n    removedUpVotes.forEach((vote) => {\n      if (vote !== post._id) {\n        newRemovedUpVotes.push(vote);\n      }\n    });\n\n    dispatch({\n      type: REMOVE_UP_VOTE,\n      payload: newRemovedUpVotes,\n    });\n\n    dispatch({\n      type: DOWN_VOTE,\n      payload: newDownVotes,\n    });\n  } else {\n    // remove from local up vote state\n    let newUpVotes = [];\n\n    upVotes.forEach((vote) => {\n      if (vote !== post._id) {\n        newUpVotes.push(vote);\n      }\n    });\n\n    dispatch({\n      type: UP_VOTE,\n      payload: newUpVotes,\n    });\n\n    const newRemovedUpVotes = [...removedDownVotes, post._id];\n\n    dispatch({\n      type: REMOVE_UP_VOTE,\n      payload: newRemovedUpVotes,\n    });\n    // remove up vote with put request\n    await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}