{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { GET_MY_POSTS, GET_POSTS, GET_POST, LOAD_MORE_POSTS, LOADING_MORE_POSTS, GET_COMMENTS } from \"./types\";\nimport { APIURL } from \"../config/vars\";\nexport const getPost = postId => dispatch => {\n  axios.get(`${APIURL}posts/${postId}`).then(res => {\n    dispatch({\n      type: GET_POST,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n\n  if (user) {\n    axios.get(`${APIURL}posts?user=${user._id}`).then(res => {\n      dispatch({\n        type: GET_MY_POSTS,\n        payload: res.data.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n  }\n};\nexport const getPosts = category => dispatch => {\n  dispatch({\n    type: GET_POSTS,\n    payload: []\n  });\n\n  if (category) {\n    axios.get(`${APIURL}posts?category=${category}`).then(res => {\n      dispatch({\n        type: GET_POSTS,\n        payload: res.data.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n  } else {\n    axios.get(`${APIURL}posts`).then(res => {\n      dispatch({\n        type: GET_POSTS,\n        payload: res.data.data\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n  }\n};\nexport const loadMorePosts = category => (dispatch, getState) => {\n  const posts = getState().posts.posts;\n  const page = getState().posts.page;\n  dispatch({\n    type: LOADING_MORE_POSTS,\n    payload: true\n  });\n\n  if (category) {\n    axios.get(`${APIURL}posts?category=${category}&page=${page + 1}`).then(res => {\n      const newPosts = [...posts, ...res.data.data];\n      dispatch({\n        type: LOAD_MORE_POSTS,\n        payload: newPosts,\n        page: page + 1\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOADING_MORE_POSTS,\n        payload: false\n      });\n    });\n  } else {\n    axios.get(`${APIURL}posts?&page=${page}`).then(res => {\n      const newPosts = [...posts, ...res.data.data];\n      dispatch({\n        type: LOAD_MORE_POSTS,\n        payload: newPosts,\n        page: page + 1\n      });\n    }).catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: LOADING_MORE_POSTS,\n        payload: false\n      });\n    });\n  }\n};\nexport const upVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (upVote.data.success) {\n    let newPosts = [];\n    posts.forEach(post => {\n      if (post._id !== upVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: upVote.data.data.upVotes,\n          downVotes: upVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n\n    if (removedUpVote.data.success) {\n      let newPosts = [];\n      posts.forEach(post => {\n        if (post._id !== removedUpVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedUpVote.data.data.upVotes,\n            downVotes: removedUpVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts\n      });\n    }\n  }\n};\nexport const downVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n  const downVote = await axios.post(`${APIURL}votes/downvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (downVote.data.success) {\n    let newPosts = [];\n    posts.forEach(post => {\n      if (post._id !== downVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: downVote.data.data.upVotes,\n          downVotes: downVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts\n    });\n  } else {\n    const removedDownVote = await axios.put(`${APIURL}votes/downvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n\n    if (removedDownVote.data.success) {\n      let newPosts = [];\n      posts.forEach(post => {\n        if (post._id !== removedDownVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedDownVote.data.data.upVotes,\n            downVotes: removedDownVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts\n      });\n    }\n  }\n};\nexport const getComments = postId => dispatch => {\n  axios.get(`${APIURL}posts/${postId}/comments`).then(res => {\n    dispatch({\n      type: GET_COMMENTS,\n      payload: res.data.data\n    });\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n  });\n};\nexport const postPageUpVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const post = getState().post.post;\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (upVote.data.success) {\n    dispatch({\n      type: GET_POST,\n      payload: upVote.data.data\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n\n    if (removedUpVote.data.success) {\n      dispatch({\n        type: GET_POST,\n        payload: upVote.data.data\n      });\n    }\n  }\n};\nexport const postPageDownVote = post => async (dispatch, getState) => {\n  const user = getState().auth;\n  const post = getState().post.post;\n  const downVote = await axios.post(`${APIURL}votes/downvotepost`, {\n    post: post._id,\n    user: user.user._id\n  });\n\n  if (downVote.data.success) {\n    dispatch({\n      type: GET_POST,\n      payload: downVote.data.data\n    });\n  } else {\n    // remove up vote with put request\n    const removedDownVote = await axios.put(`${APIURL}votes/downvotepost`, {\n      post: post._id,\n      user: user.user._id\n    });\n\n    if (removedDownVote.data.success) {\n      dispatch({\n        type: GET_POST,\n        payload: downVote.data.data\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/justin/Documents/Programming /meme-share/client/src/actions/postActions.js"],"names":["axios","returnErrors","GET_MY_POSTS","GET_POSTS","GET_POST","LOAD_MORE_POSTS","LOADING_MORE_POSTS","GET_COMMENTS","APIURL","getPost","postId","dispatch","get","then","res","type","payload","data","catch","err","response","status","getMyPosts","getState","user","auth","_id","getPosts","category","loadMorePosts","posts","page","newPosts","upVote","post","success","forEach","push","updatedPost","upVotes","downVotes","title","content","createdAt","__v","comments","id","removedUpVote","put","downVote","removedDownVote","getComments","postPageUpVote","postPageDownVote"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACEC,YADF,EAEEC,SAFF,EAGEC,QAHF,EAIEC,eAJF,EAKEC,kBALF,EAMEC,YANF,QAOO,SAPP;AASA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,OAAO,MAAMC,OAAO,GAAIC,MAAD,IAAaC,QAAD,IAAc;AAC/CX,EAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,SAAQE,MAAO,EADhC,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,QADC;AAEPY,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFX,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdR,IAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACD,GAVH;AAWD,CAZM;AAcP,OAAO,MAAMC,UAAU,GAAG,MAAM,CAACX,QAAD,EAAWY,QAAX,KAAwB;AACtD,QAAMC,IAAI,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,IAA7B;;AACA,MAAIA,IAAJ,EAAU;AACRxB,IAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,cAAagB,IAAI,CAACE,GAAI,EADvC,EAEGb,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEb,YADC;AAEPc,QAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACD,KAVH;AAWD;AACF,CAfM;AAiBP,OAAO,MAAMM,QAAQ,GAAIC,QAAD,IAAejB,QAAD,IAAc;AAClDA,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAEZ,SADC;AAEPa,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;;AAIA,MAAIY,QAAJ,EAAc;AACZ5B,IAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,kBAAiBoB,QAAS,EAD3C,EAEGf,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEZ,SADC;AAEPa,QAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACD,KAVH;AAWD,GAZD,MAYO;AACLrB,IAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,OADjB,EAEGK,IAFH,CAESC,GAAD,IAAS;AACbH,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEZ,SADC;AAEPa,QAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFX,OAAD,CAAR;AAID,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACD,KAVH;AAWD;AACF,CA9BM;AAgCP,OAAO,MAAMQ,aAAa,GAAID,QAAD,IAAc,CAACjB,QAAD,EAAWY,QAAX,KAAwB;AACjE,QAAMO,KAAK,GAAGP,QAAQ,GAAGO,KAAX,CAAiBA,KAA/B;AACA,QAAMC,IAAI,GAAGR,QAAQ,GAAGO,KAAX,CAAiBC,IAA9B;AACApB,EAAAA,QAAQ,CAAC;AACPI,IAAAA,IAAI,EAAET,kBADC;AAEPU,IAAAA,OAAO,EAAE;AAFF,GAAD,CAAR;;AAIA,MAAIY,QAAJ,EAAc;AACZ5B,IAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,kBAAiBoB,QAAS,SAAQG,IAAI,GAAG,CAAE,EAD5D,EAEGlB,IAFH,CAESC,GAAD,IAAS;AACb,YAAMkB,QAAQ,GAAG,CAAC,GAAGF,KAAJ,EAAW,GAAGhB,GAAG,CAACG,IAAJ,CAASA,IAAvB,CAAjB;AACAN,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV,eADC;AAEPW,QAAAA,OAAO,EAAEgB,QAFF;AAGPD,QAAAA,IAAI,EAAEA,IAAI,GAAG;AAHN,OAAD,CAAR;AAKD,KATH,EAUGb,KAVH,CAUUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,kBADC;AAEPU,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KAhBH;AAiBD,GAlBD,MAkBO;AACLhB,IAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,eAAcuB,IAAK,EADpC,EAEGlB,IAFH,CAESC,GAAD,IAAS;AACb,YAAMkB,QAAQ,GAAG,CAAC,GAAGF,KAAJ,EAAW,GAAGhB,GAAG,CAACG,IAAJ,CAASA,IAAvB,CAAjB;AACAN,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEV,eADC;AAEPW,QAAAA,OAAO,EAAEgB,QAFF;AAGPD,QAAAA,IAAI,EAAEA,IAAI,GAAG;AAHN,OAAD,CAAR;AAKD,KATH,EAUGb,KAVH,CAUUC,GAAD,IAAS;AACdR,MAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAV,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAET,kBADC;AAEPU,QAAAA,OAAO,EAAE;AAFF,OAAD,CAAR;AAID,KAhBH;AAiBD;AACF,CA5CM;AA8CP,OAAO,MAAMiB,MAAM,GAAIC,IAAD,IAAU,OAAOvB,QAAP,EAAiBY,QAAjB,KAA8B;AAC5D,QAAMC,IAAI,GAAGD,QAAQ,GAAGE,IAAxB;AACA,QAAMK,KAAK,GAAGP,QAAQ,GAAGO,KAAX,CAAiBA,KAA/B;AAEA,QAAMG,MAAM,GAAG,MAAMjC,KAAK,CAACkC,IAAN,CAAY,GAAE1B,MAAO,kBAArB,EAAwC;AAC3D0B,IAAAA,IAAI,EAAEA,IAAI,CAACR,GADgD;AAE3DF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAF2C,GAAxC,CAArB;;AAKA,MAAIO,MAAM,CAAChB,IAAP,CAAYkB,OAAhB,EAAyB;AACvB,QAAIH,QAAQ,GAAG,EAAf;AACAF,IAAAA,KAAK,CAACM,OAAN,CAAeF,IAAD,IAAU;AACtB,UAAIA,IAAI,CAACR,GAAL,KAAaO,MAAM,CAAChB,IAAP,CAAYA,IAAZ,CAAiBS,GAAlC,EAAuC;AACrCM,QAAAA,QAAQ,CAACK,IAAT,CAAcH,IAAd;AACD,OAFD,MAEO;AACL,cAAMI,WAAW,GAAG;AAClBV,UAAAA,QAAQ,EAAEM,IAAI,CAACN,QADG;AAElBW,UAAAA,OAAO,EAAEN,MAAM,CAAChB,IAAP,CAAYA,IAAZ,CAAiBsB,OAFR;AAGlBC,UAAAA,SAAS,EAAEP,MAAM,CAAChB,IAAP,CAAYA,IAAZ,CAAiBuB,SAHV;AAIlBd,UAAAA,GAAG,EAAEQ,IAAI,CAACR,GAJQ;AAKlBe,UAAAA,KAAK,EAAEP,IAAI,CAACO,KALM;AAMlBC,UAAAA,OAAO,EAAER,IAAI,CAACQ,OANI;AAOlBlB,UAAAA,IAAI,EAAEU,IAAI,CAACV,IAPO;AAQlBmB,UAAAA,SAAS,EAAET,IAAI,CAACS,SARE;AASlBC,UAAAA,GAAG,EAAEV,IAAI,CAACU,GATQ;AAUlBC,UAAAA,QAAQ,EAAEX,IAAI,CAACW,QAVG;AAWlBC,UAAAA,EAAE,EAAEZ,IAAI,CAACR;AAXS,SAApB;AAaAM,QAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd;AACD;AACF,KAnBD;AAoBA3B,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEZ,SADC;AAEPa,MAAAA,OAAO,EAAEgB;AAFF,KAAD,CAAR;AAID,GA1BD,MA0BO;AACL;AACA,UAAMe,aAAa,GAAG,MAAM/C,KAAK,CAACgD,GAAN,CAAW,GAAExC,MAAO,kBAApB,EAAuC;AACjE0B,MAAAA,IAAI,EAAEA,IAAI,CAACR,GADsD;AAEjEF,MAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAFiD,KAAvC,CAA5B;;AAKA,QAAIqB,aAAa,CAAC9B,IAAd,CAAmBkB,OAAvB,EAAgC;AAC9B,UAAIH,QAAQ,GAAG,EAAf;AACAF,MAAAA,KAAK,CAACM,OAAN,CAAeF,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACR,GAAL,KAAaqB,aAAa,CAAC9B,IAAd,CAAmBA,IAAnB,CAAwBS,GAAzC,EAA8C;AAC5CM,UAAAA,QAAQ,CAACK,IAAT,CAAcH,IAAd;AACD,SAFD,MAEO;AACL,gBAAMI,WAAW,GAAG;AAClBV,YAAAA,QAAQ,EAAEM,IAAI,CAACN,QADG;AAElBW,YAAAA,OAAO,EAAEQ,aAAa,CAAC9B,IAAd,CAAmBA,IAAnB,CAAwBsB,OAFf;AAGlBC,YAAAA,SAAS,EAAEO,aAAa,CAAC9B,IAAd,CAAmBA,IAAnB,CAAwBuB,SAHjB;AAIlBd,YAAAA,GAAG,EAAEQ,IAAI,CAACR,GAJQ;AAKlBe,YAAAA,KAAK,EAAEP,IAAI,CAACO,KALM;AAMlBC,YAAAA,OAAO,EAAER,IAAI,CAACQ,OANI;AAOlBlB,YAAAA,IAAI,EAAEU,IAAI,CAACV,IAPO;AAQlBmB,YAAAA,SAAS,EAAET,IAAI,CAACS,SARE;AASlBC,YAAAA,GAAG,EAAEV,IAAI,CAACU,GATQ;AAUlBC,YAAAA,QAAQ,EAAEX,IAAI,CAACW,QAVG;AAWlBC,YAAAA,EAAE,EAAEZ,IAAI,CAACR;AAXS,WAApB;AAaAM,UAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd;AACD;AACF,OAnBD;AAoBA3B,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEZ,SADC;AAEPa,QAAAA,OAAO,EAAEgB;AAFF,OAAD,CAAR;AAID;AACF;AACF,CAtEM;AAwEP,OAAO,MAAMiB,QAAQ,GAAIf,IAAD,IAAU,OAAOvB,QAAP,EAAiBY,QAAjB,KAA8B;AAC9D,QAAMC,IAAI,GAAGD,QAAQ,GAAGE,IAAxB;AACA,QAAMK,KAAK,GAAGP,QAAQ,GAAGO,KAAX,CAAiBA,KAA/B;AAEA,QAAMmB,QAAQ,GAAG,MAAMjD,KAAK,CAACkC,IAAN,CAAY,GAAE1B,MAAO,oBAArB,EAA0C;AAC/D0B,IAAAA,IAAI,EAAEA,IAAI,CAACR,GADoD;AAE/DF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAF+C,GAA1C,CAAvB;;AAKA,MAAIuB,QAAQ,CAAChC,IAAT,CAAckB,OAAlB,EAA2B;AACzB,QAAIH,QAAQ,GAAG,EAAf;AACAF,IAAAA,KAAK,CAACM,OAAN,CAAeF,IAAD,IAAU;AACtB,UAAIA,IAAI,CAACR,GAAL,KAAauB,QAAQ,CAAChC,IAAT,CAAcA,IAAd,CAAmBS,GAApC,EAAyC;AACvCM,QAAAA,QAAQ,CAACK,IAAT,CAAcH,IAAd;AACD,OAFD,MAEO;AACL,cAAMI,WAAW,GAAG;AAClBV,UAAAA,QAAQ,EAAEM,IAAI,CAACN,QADG;AAElBW,UAAAA,OAAO,EAAEU,QAAQ,CAAChC,IAAT,CAAcA,IAAd,CAAmBsB,OAFV;AAGlBC,UAAAA,SAAS,EAAES,QAAQ,CAAChC,IAAT,CAAcA,IAAd,CAAmBuB,SAHZ;AAIlBd,UAAAA,GAAG,EAAEQ,IAAI,CAACR,GAJQ;AAKlBe,UAAAA,KAAK,EAAEP,IAAI,CAACO,KALM;AAMlBC,UAAAA,OAAO,EAAER,IAAI,CAACQ,OANI;AAOlBlB,UAAAA,IAAI,EAAEU,IAAI,CAACV,IAPO;AAQlBmB,UAAAA,SAAS,EAAET,IAAI,CAACS,SARE;AASlBC,UAAAA,GAAG,EAAEV,IAAI,CAACU,GATQ;AAUlBC,UAAAA,QAAQ,EAAEX,IAAI,CAACW,QAVG;AAWlBC,UAAAA,EAAE,EAAEZ,IAAI,CAACR;AAXS,SAApB;AAaAM,QAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd;AACD;AACF,KAnBD;AAoBA3B,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEZ,SADC;AAEPa,MAAAA,OAAO,EAAEgB;AAFF,KAAD,CAAR;AAID,GA1BD,MA0BO;AACL,UAAMkB,eAAe,GAAG,MAAMlD,KAAK,CAACgD,GAAN,CAAW,GAAExC,MAAO,oBAApB,EAAyC;AACrE0B,MAAAA,IAAI,EAAEA,IAAI,CAACR,GAD0D;AAErEF,MAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAFqD,KAAzC,CAA9B;;AAKA,QAAIwB,eAAe,CAACjC,IAAhB,CAAqBkB,OAAzB,EAAkC;AAChC,UAAIH,QAAQ,GAAG,EAAf;AACAF,MAAAA,KAAK,CAACM,OAAN,CAAeF,IAAD,IAAU;AACtB,YAAIA,IAAI,CAACR,GAAL,KAAawB,eAAe,CAACjC,IAAhB,CAAqBA,IAArB,CAA0BS,GAA3C,EAAgD;AAC9CM,UAAAA,QAAQ,CAACK,IAAT,CAAcH,IAAd;AACD,SAFD,MAEO;AACL,gBAAMI,WAAW,GAAG;AAClBV,YAAAA,QAAQ,EAAEM,IAAI,CAACN,QADG;AAElBW,YAAAA,OAAO,EAAEW,eAAe,CAACjC,IAAhB,CAAqBA,IAArB,CAA0BsB,OAFjB;AAGlBC,YAAAA,SAAS,EAAEU,eAAe,CAACjC,IAAhB,CAAqBA,IAArB,CAA0BuB,SAHnB;AAIlBd,YAAAA,GAAG,EAAEQ,IAAI,CAACR,GAJQ;AAKlBe,YAAAA,KAAK,EAAEP,IAAI,CAACO,KALM;AAMlBC,YAAAA,OAAO,EAAER,IAAI,CAACQ,OANI;AAOlBlB,YAAAA,IAAI,EAAEU,IAAI,CAACV,IAPO;AAQlBmB,YAAAA,SAAS,EAAET,IAAI,CAACS,SARE;AASlBC,YAAAA,GAAG,EAAEV,IAAI,CAACU,GATQ;AAUlBC,YAAAA,QAAQ,EAAEX,IAAI,CAACW,QAVG;AAWlBC,YAAAA,EAAE,EAAEZ,IAAI,CAACR;AAXS,WAApB;AAaAM,UAAAA,QAAQ,CAACK,IAAT,CAAcC,WAAd;AACD;AACF,OAnBD;AAoBA3B,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEZ,SADC;AAEPa,QAAAA,OAAO,EAAEgB;AAFF,OAAD,CAAR;AAID;AACF;AACF,CArEM;AAuEP,OAAO,MAAMmB,WAAW,GAAIzC,MAAD,IAAaC,QAAD,IAAc;AACnDX,EAAAA,KAAK,CACFY,GADH,CACQ,GAAEJ,MAAO,SAAQE,MAAO,WADhC,EAEGG,IAFH,CAESC,GAAD,IAAS;AACbH,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAER,YADC;AAEPS,MAAAA,OAAO,EAAEF,GAAG,CAACG,IAAJ,CAASA;AAFX,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdR,IAAAA,QAAQ,CAACV,YAAY,CAACkB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACD,GAVH;AAWD,CAZM;AAcP,OAAO,MAAM+B,cAAc,GAAIlB,IAAD,IAAU,OAAOvB,QAAP,EAAiBY,QAAjB,KAA8B;AACpE,QAAMC,IAAI,GAAGD,QAAQ,GAAGE,IAAxB;AACA,QAAMS,IAAI,GAAGX,QAAQ,GAAGW,IAAX,CAAgBA,IAA7B;AAEA,QAAMD,MAAM,GAAG,MAAMjC,KAAK,CAACkC,IAAN,CAAY,GAAE1B,MAAO,kBAArB,EAAwC;AAC3D0B,IAAAA,IAAI,EAAEA,IAAI,CAACR,GADgD;AAE3DF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAF2C,GAAxC,CAArB;;AAKA,MAAIO,MAAM,CAAChB,IAAP,CAAYkB,OAAhB,EAAyB;AACvBxB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,QADC;AAEPY,MAAAA,OAAO,EAAEiB,MAAM,CAAChB,IAAP,CAAYA;AAFd,KAAD,CAAR;AAID,GALD,MAKO;AACL;AACA,UAAM8B,aAAa,GAAG,MAAM/C,KAAK,CAACgD,GAAN,CAAW,GAAExC,MAAO,kBAApB,EAAuC;AACjE0B,MAAAA,IAAI,EAAEA,IAAI,CAACR,GADsD;AAEjEF,MAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAFiD,KAAvC,CAA5B;;AAKA,QAAIqB,aAAa,CAAC9B,IAAd,CAAmBkB,OAAvB,EAAgC;AAC9BxB,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,QADC;AAEPY,QAAAA,OAAO,EAAEiB,MAAM,CAAChB,IAAP,CAAYA;AAFd,OAAD,CAAR;AAID;AACF;AACF,CA5BM;AA8BP,OAAO,MAAMoC,gBAAgB,GAAInB,IAAD,IAAU,OAAOvB,QAAP,EAAiBY,QAAjB,KAA8B;AACtE,QAAMC,IAAI,GAAGD,QAAQ,GAAGE,IAAxB;AACA,QAAMS,IAAI,GAAGX,QAAQ,GAAGW,IAAX,CAAgBA,IAA7B;AAEA,QAAMe,QAAQ,GAAG,MAAMjD,KAAK,CAACkC,IAAN,CAAY,GAAE1B,MAAO,oBAArB,EAA0C;AAC/D0B,IAAAA,IAAI,EAAEA,IAAI,CAACR,GADoD;AAE/DF,IAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAF+C,GAA1C,CAAvB;;AAKA,MAAIuB,QAAQ,CAAChC,IAAT,CAAckB,OAAlB,EAA2B;AACzBxB,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEX,QADC;AAEPY,MAAAA,OAAO,EAAEiC,QAAQ,CAAChC,IAAT,CAAcA;AAFhB,KAAD,CAAR;AAID,GALD,MAKO;AACL;AACA,UAAMiC,eAAe,GAAG,MAAMlD,KAAK,CAACgD,GAAN,CAAW,GAAExC,MAAO,oBAApB,EAAyC;AACrE0B,MAAAA,IAAI,EAAEA,IAAI,CAACR,GAD0D;AAErEF,MAAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUE;AAFqD,KAAzC,CAA9B;;AAKA,QAAIwB,eAAe,CAACjC,IAAhB,CAAqBkB,OAAzB,EAAkC;AAChCxB,MAAAA,QAAQ,CAAC;AACPI,QAAAA,IAAI,EAAEX,QADC;AAEPY,QAAAA,OAAO,EAAEiC,QAAQ,CAAChC,IAAT,CAAcA;AAFhB,OAAD,CAAR;AAID;AACF;AACF,CA5BM","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport {\n  GET_MY_POSTS,\n  GET_POSTS,\n  GET_POST,\n  LOAD_MORE_POSTS,\n  LOADING_MORE_POSTS,\n  GET_COMMENTS,\n} from \"./types\";\n\nimport { APIURL } from \"../config/vars\";\n\nexport const getPost = (postId) => (dispatch) => {\n  axios\n    .get(`${APIURL}posts/${postId}`)\n    .then((res) => {\n      dispatch({\n        type: GET_POST,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\nexport const getMyPosts = () => (dispatch, getState) => {\n  const user = getState().auth.user;\n  if (user) {\n    axios\n      .get(`${APIURL}posts?user=${user._id}`)\n      .then((res) => {\n        dispatch({\n          type: GET_MY_POSTS,\n          payload: res.data.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n      });\n  }\n};\n\nexport const getPosts = (category) => (dispatch) => {\n  dispatch({\n    type: GET_POSTS,\n    payload: [],\n  });\n  if (category) {\n    axios\n      .get(`${APIURL}posts?category=${category}`)\n      .then((res) => {\n        dispatch({\n          type: GET_POSTS,\n          payload: res.data.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n      });\n  } else {\n    axios\n      .get(`${APIURL}posts`)\n      .then((res) => {\n        dispatch({\n          type: GET_POSTS,\n          payload: res.data.data,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n      });\n  }\n};\n\nexport const loadMorePosts = (category) => (dispatch, getState) => {\n  const posts = getState().posts.posts;\n  const page = getState().posts.page;\n  dispatch({\n    type: LOADING_MORE_POSTS,\n    payload: true,\n  });\n  if (category) {\n    axios\n      .get(`${APIURL}posts?category=${category}&page=${page + 1}`)\n      .then((res) => {\n        const newPosts = [...posts, ...res.data.data];\n        dispatch({\n          type: LOAD_MORE_POSTS,\n          payload: newPosts,\n          page: page + 1,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n          type: LOADING_MORE_POSTS,\n          payload: false,\n        });\n      });\n  } else {\n    axios\n      .get(`${APIURL}posts?&page=${page}`)\n      .then((res) => {\n        const newPosts = [...posts, ...res.data.data];\n        dispatch({\n          type: LOAD_MORE_POSTS,\n          payload: newPosts,\n          page: page + 1,\n        });\n      })\n      .catch((err) => {\n        dispatch(returnErrors(err.response.data, err.response.status));\n        dispatch({\n          type: LOADING_MORE_POSTS,\n          payload: false,\n        });\n      });\n  }\n};\n\nexport const upVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (upVote.data.success) {\n    let newPosts = [];\n    posts.forEach((post) => {\n      if (post._id !== upVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: upVote.data.data.upVotes,\n          downVotes: upVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id,\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts,\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n\n    if (removedUpVote.data.success) {\n      let newPosts = [];\n      posts.forEach((post) => {\n        if (post._id !== removedUpVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedUpVote.data.data.upVotes,\n            downVotes: removedUpVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id,\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts,\n      });\n    }\n  }\n};\n\nexport const downVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const posts = getState().posts.posts;\n\n  const downVote = await axios.post(`${APIURL}votes/downvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (downVote.data.success) {\n    let newPosts = [];\n    posts.forEach((post) => {\n      if (post._id !== downVote.data.data._id) {\n        newPosts.push(post);\n      } else {\n        const updatedPost = {\n          category: post.category,\n          upVotes: downVote.data.data.upVotes,\n          downVotes: downVote.data.data.downVotes,\n          _id: post._id,\n          title: post.title,\n          content: post.content,\n          user: post.user,\n          createdAt: post.createdAt,\n          __v: post.__v,\n          comments: post.comments,\n          id: post._id,\n        };\n        newPosts.push(updatedPost);\n      }\n    });\n    dispatch({\n      type: GET_POSTS,\n      payload: newPosts,\n    });\n  } else {\n    const removedDownVote = await axios.put(`${APIURL}votes/downvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n\n    if (removedDownVote.data.success) {\n      let newPosts = [];\n      posts.forEach((post) => {\n        if (post._id !== removedDownVote.data.data._id) {\n          newPosts.push(post);\n        } else {\n          const updatedPost = {\n            category: post.category,\n            upVotes: removedDownVote.data.data.upVotes,\n            downVotes: removedDownVote.data.data.downVotes,\n            _id: post._id,\n            title: post.title,\n            content: post.content,\n            user: post.user,\n            createdAt: post.createdAt,\n            __v: post.__v,\n            comments: post.comments,\n            id: post._id,\n          };\n          newPosts.push(updatedPost);\n        }\n      });\n      dispatch({\n        type: GET_POSTS,\n        payload: newPosts,\n      });\n    }\n  }\n};\n\nexport const getComments = (postId) => (dispatch) => {\n  axios\n    .get(`${APIURL}posts/${postId}/comments`)\n    .then((res) => {\n      dispatch({\n        type: GET_COMMENTS,\n        payload: res.data.data,\n      });\n    })\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n    });\n};\n\nexport const postPageUpVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const post = getState().post.post;\n\n  const upVote = await axios.post(`${APIURL}votes/upvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (upVote.data.success) {\n    dispatch({\n      type: GET_POST,\n      payload: upVote.data.data,\n    });\n  } else {\n    // remove up vote with put request\n    const removedUpVote = await axios.put(`${APIURL}votes/upvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n\n    if (removedUpVote.data.success) {\n      dispatch({\n        type: GET_POST,\n        payload: upVote.data.data,\n      });\n    }\n  }\n};\n\nexport const postPageDownVote = (post) => async (dispatch, getState) => {\n  const user = getState().auth;\n  const post = getState().post.post;\n\n  const downVote = await axios.post(`${APIURL}votes/downvotepost`, {\n    post: post._id,\n    user: user.user._id,\n  });\n\n  if (downVote.data.success) {\n    dispatch({\n      type: GET_POST,\n      payload: downVote.data.data,\n    });\n  } else {\n    // remove up vote with put request\n    const removedDownVote = await axios.put(`${APIURL}votes/downvotepost`, {\n      post: post._id,\n      user: user.user._id,\n    });\n\n    if (removedDownVote.data.success) {\n      dispatch({\n        type: GET_POST,\n        payload: downVote.data.data,\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}